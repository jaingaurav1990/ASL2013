package ch.ethz.inf.asl13.user40.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import ch.ethz.inf.asl13.user40.*;

/**
 * Provides access to the messaging service.
 */
public class MessagingServiceClient {

	private final MessagingService messagingService = getPort();
	private final Client client;
	private final int queueId;

	public MessagingServiceClient(String clientID, int queueId) {
		this.client = new Client(clientID);
		this.queueId = queueId;
	}

	public Client getClient() {
		return client;
	}

	private void sendIfNotNull(Message message) {
		if (message != null && !message.isNullMessage()) {
			message.sender = client;
			messagingService.insertMessage(message);
		}
	}

	/**
	 * Creates a new message containing the class name client ID.
	 */
	public Message createMessage() {
		Message m = new Message();
		m.text = toString();
		m.priority = client.id;
		m.queueId = queueId;
		return m;
	}

	/**
	 * Waits for a message on the queue and sends it back to the origin.
	 * The {@link #beforeSendingMessage(Message)} method is called before
	 * sending to allow for modifying the message content.
	 *
	 * @param initialMessage If set, this message is sent before waiting
	 *        for messages to start the ball rolling.
	 */
	public void sendMessagesIndefinitely(Message initialMessage) {
		System.out.println("Start " + this);

		sendIfNotNull(initialMessage);

		while (true) {
			Message message = messagingService.getFirstMessage(queueId, client, true);
			if (!message.isNullMessage()) {
				message.receiver = message.sender; // send message back to sender
				message.text += "," + client.id;	

				beforeSendingMessage(message);
				sendIfNotNull(message);
			} else {
				try {
					Thread.sleep(50);
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	/**
	 * Override this method to modify the message before it is sent.
	 */
	protected void beforeSendingMessage(Message message) {}

	@Override
	public String toString() {
		return getClass().getSimpleName() + " " + client.id;
	}

	/**
	 * Returns a proxy the messaging service, located at the default address.
	 */
	public static MessagingService getPort() {
		return getPort(MessagingService.DEFAULT_SERVICE_URL);
	}

	/**
	 * Returns a proxy the messaging service, located at the specified address.
	 * @param address The URL where the messaging service can be located.
	 */
	public static MessagingService getPort(String address) {
		try {
			URL url = new URL(address);
			QName qname = new QName("http://server.user40.asl13.inf.ethz.ch/", "MessagingServiceImplService");
			Service service = Service.create(url, qname);
			return service.getPort(MessagingService.class);
		} catch (MalformedURLException ex) {
			throw new IllegalStateException(ex);
		}
	}

	public static void main(String[] args) {
		MessagingService service = getPort();
		service.insertMessage(new Message("hello"));
		service.insertMessage(new Message(" from "));		
		service.insertMessage(new Message("client"));
	}
}