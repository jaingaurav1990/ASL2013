package ch.ethz.inf.asl13.user40.server;

import javax.jws.WebService;
import javax.xml.ws.Endpoint;
import ch.ethz.inf.asl13.user40.*;

/**
 * Implements the messaging service.
 */
@WebService(endpointInterface = "ch.ethz.inf.asl13.user40.MessagingService")
public class MessagingServiceImpl implements MessagingService {

    // private final Queue<Message> messages = new ConcurrentLinkedQueue<Message>();
    // private final AtomicLong insertCount = new AtomicLong();
	@Override
	public void insertMessage(Message message) {
        /*
        if (message == null) throw new NullPointerException();
        if (message.isNullMessage()) throw new IllegalArgumentException();

        messages.add(message);

        long n = insertCount.incrementAndGet();
        if (n < 100) {
            System.out.println(message);
        } 
        else if (n % 1000 == 0) {
        */
            DatabaseServicePreparedStatement db = new DatabaseServicePreparedStatement();
            db.insertMessage(message);
		    System.out.println(message);
        /*
        }
        */
	}

	@Override
	public Message getFirstMessage(int queue, Client sender, boolean remove) {
        /*
        for (Message m : messages) {
        if (m.queueId == queue &&
                (m.receiver == null ||
                (sender != null && m.receiver.id == sender.id))) {
            if (remove) {
                messages.remove(m);
            }

            return m;
         }
        }
        */
        DatabaseServicePreparedStatement db = new DatabaseServicePreparedStatement();
        return db.getFirstMessage(queue, sender, remove);
		//return null;
	}

	@Override
	public Message getMessageOfHighestPriority(int queue, Client sender, boolean remove) {
        DatabaseServicePreparedStatement db = new DatabaseServicePreparedStatement();
        return db.getMessageOfHighestPriority(queue, sender, remove);
		//return null;
	}

	@Override
	public int[] listQueues() {
        DatabaseServicePreparedStatement db = new DatabaseServicePreparedStatement();
        return db.listQueues();
		//return new int[]{ 4, 2, 5, 67, 3 };
	}

	@Override
	public int[] listQueuesWithWaitingMessages(Client client) {
        DatabaseServicePreparedStatement db = new DatabaseServicePreparedStatement();
        return db.listQueuesWithWaitingMessages(client);
		//return new int[0];
	}

	@Override
	public int createQueue() {
        DatabaseServicePreparedStatement db = new DatabaseServicePreparedStatement();
        return db.createQueue();
	    // return -1;
	}

	@Override
	public void deleteQueue(int queue) {
        DatabaseServicePreparedStatement db = new DatabaseServicePreparedStatement();
        db.deleteQueue(queue); 
	}

	/**
	 * Entry point for the application.
	 * Creates and publishes the messaging service.
	 */
	public static void main(String[] args) {
		publish();
	}

	/**
	 * Creates and publishes a messaging service endpoint at the default address.
	 * @return The newly created endpoint.
	 */
	public static Endpoint publish() {
		return publish(DEFAULT_SERVICE_URL);
	}

	/**
	 * Creates and publishes a messaging service endpoint at the specified address.
	 * @param address A URI specifying the address and transport/protocol to use.
	 * @return The newly created endpoint.
	 */
	protected static Endpoint publish(String address) {
		Endpoint endpoint = Endpoint.publish(address, new MessagingServiceImpl());
		System.out.println("Listening at " + address + "...");
		return endpoint;
	}
}
