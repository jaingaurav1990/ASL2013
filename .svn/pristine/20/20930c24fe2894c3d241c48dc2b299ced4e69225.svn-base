package ch.ethz.inf.asl13.user40.server;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;
import javax.jws.WebService;
import javax.xml.ws.Endpoint;
import ch.ethz.inf.asl13.user40.*;

/**
 * Implements the messaging service.
 */
@WebService(endpointInterface = "ch.ethz.inf.asl13.user40.MessagingService")
public class MessagingServiceImpl implements MessagingService {

	private final Queue<Message> messages = new ConcurrentLinkedQueue<Message>();
	private final AtomicLong insertCount = new AtomicLong();

	@Override
	public void insertMessage(Message message) {
		if (message == null) throw new NullPointerException();
		if (message.isNullMessage()) throw new IllegalArgumentException();

		messages.add(message);

		long n = insertCount.incrementAndGet();
		if (n < 100) {
			System.out.println(message);
		} else if (n % 1000 == 0) {
			System.out.println(n + " messages processed; " + messages.size() + " currently stored.");
		}
	}

	@Override
	public Message getFirstMessage(int queue, Client sender, boolean remove) {
		for (Message m : messages) {
			if (m.queueId == queue &&
				(m.receiver == null ||
				(sender != null && m.receiver.id == sender.id))) 
			{

				if (remove) {
					messages.remove(m);
				}

				return m;
			}
		}

		return new Message();
	}

	@Override
	public Message getMessageOfHighestPriority(int queue, Client sender, boolean remove) {
		return getFirstMessage(queue, sender, remove);
	}

	@Override
	public int[] listQueues() {
		return new int[]{ 4, 2, 5, 67, 3 };
	}

	@Override
	public int[] listQueuesWithWaitingMessages(Client client) {
		return new int[0];
	}

	@Override
	public int createQueue() {
		return -1;
	}

	@Override
	public void deleteQueue(int queue) {
	}
}